# importation de pygame
import pygame
from pygame.locals import *

pygame.init()
pygame.font.init()

# définition des variables du jeu
larg_ecran = 1080
haut_ecran = 720
colonnes = 8
lignes = 8
temps = pygame.time.Clock()
difficulte = 50 # à partir de 1 : plus le nombre est elevé plus la balle est rapide
etat = False
vie = 0
police = pygame.font.SysFont('Rockwell Nova', 40)

# définition de la fenêtre de jeu
ecran = pygame.display.set_mode((larg_ecran, haut_ecran))
pygame.display.set_caption('CASSE-BRIQUES')

# définition des briques : on utilise une classe
class briques():
    
    # définition des paramètres des briques : la taille (hauteur et largeur) 
    def __init__(self):
        self.larg = larg_ecran // colonnes
        self.haut = 50
        
    # création des briques, qu'on stocke dans une matrice
    def cree_briques(self):
        self.liste_briques = []
        for ligne in range(lignes):
            ligne_briques = []
            for colonne in range(colonnes):
                brique_x = colonne * self.larg
                brique_y = ligne * self.haut
                rect = pygame.Rect(brique_x, brique_y, self.larg, self.haut)
                # on assigne une difficulté à chaque brique, qui sera liée à une couleur avec la fonction suivante
                if ligne < 1:
                    difficulte = 5
                elif ligne < 2:
                    difficulte = 4
                elif ligne < 4:
                    difficulte = 3
                elif ligne < 6:
                    difficulte = 2
                elif ligne < 8:
                    difficulte = 1
                brique = [rect, difficulte]
                ligne_briques.append(brique)
            self.liste_briques.append(ligne_briques)
            
    # affichage des briques, dont la couleur change en fonction de leur difficulté (qui correspond à leur nombre de vies)
    def proj_briques(self):
        for ligne in self.liste_briques:
            for b in ligne:
                if b[1] == 5 : 
                    b_col = (209, 17, 65)
                elif b[1] ==4 :
                    b_col = (243, 119, 53)
                elif b[1] == 3:
                    b_col = (255, 196, 37)
                elif b[1] == 2:
                    b_col = (0, 177, 89)
                elif b[1] == 1:
                    b_col = (0, 174, 219)
                pygame.draw.rect(ecran, b_col, b[0])
                pygame.draw.rect(ecran, (219, 213, 217), b[0], 1)
                
                
# définition du palet : on utilise une deuxième classe
class palet():
    
    # défnir zero de manière séparée permet de réinitialiser le jeu pour pouvoir recommencer à jouer après avoir gagné ou perdu
    def __init__(self):
        self.zero()
        
    # définition du mouvement du palet, il peut aller vers la droite ou la gauche suivant la touche sur laquelle on appuie
    def mvt(self):
        touche = pygame.key.get_pressed()
        if touche[pygame.K_LEFT] and self.rect.left > 0: #le palet se dirige vers la gauche
            self.rect.x -= self.vitesse
        if touche[pygame.K_RIGHT] and self.rect.right < larg_ecran: #le palet se dirige vers la droite
            self.rect.x += self.vitesse
            
    # affichage du palet, on choisit aussi la couleur du palet
    def proj(self):
        pygame.draw.rect(ecran, (214, 7, 147), self.rect)
        
    # définition des paramètres du palet
    def zero(self):
        self.haut = 20
        self.larg = larg_ecran // colonnes
        self.x = larg_ecran // 2 - self.larg // 2
        self.y = haut_ecran - (self.haut * 2)
        self.vitesse = 10
        self.rect = Rect(self.x, self.y, self.larg, self.haut)


# définition de la balle : on utilise une troisième classe
class balle():
    
    # de la même manière on veut pouvoir réinitialiser le jeu
    def __init__(self, x, y):
        self.zero(x, y)
        
    # définition du mouvement de la balle (donc principalment fonction de collision)
    def mvt(self):
        # collision avec les briques
        cl=0
        for l in briques.liste_briques:
            cb=0
            for b in l:
                compteur = False
                if abs(b[0].top - self.rect.bottom) < self.vitesse_y and self.vitesse_y > 0 and b[0].left - self.rect.right < 0 and b[0].right - self.rect.left > 0 :                            
                    self.vitesse_y *= -1
                    compteur = True
                if abs(b[0].bottom - self.rect.top) < -self.vitesse_y and self.vitesse_y < 0 and b[0].left - self.rect.right < 0 and b[0].right - self.rect.left > 0 :
                    self.vitesse_y *= -1
                    compteur = True
                if abs(b[0].left - self.rect.right) < self.vitesse_x and self.vitesse_x > 0 and b[0].top - self.rect.bottom < 0 and b[0].bottom - self.rect.top > 0 :
                    self.vitesse_x *= -1
                    compteur = True
                if abs(b[0].right - self.rect.left) < -self.vitesse_x and self.vitesse_x < 0 and b[0].top - self.rect.bottom < 0 and b[0].bottom - self.rect.top > 0 :
                    self.vitesse_x *= -1
                    compteur = True
                if compteur : #s'il y a eu une collision  
                    if b[1] > 1:
                        b[1] -=1 #on diminue la difficulté de la brique (son "nombre de vie")
                        cb +=1
                    else : 
                        briques.liste_briques[cl].pop(cb) #la brique disparait 
                else :
                    cb +=1
            if l ==[]: # si la ligne est vide, on la supprime du mur de brique
                briques.liste_briques.pop(cl)
            else : #sinon on passe à la ligne suivante 
                cl +=1
                     
        # si la matrice est vide, on a détruit toutes les briques donc le jeu est fini
        if briques.liste_briques == []:
            self.vie = 1
            
        # collision avec les côtés gauche et droit de la fenêtre
        if self.rect.left < 0 or self.rect.right > larg_ecran:
            self.vitesse_x *= -1
            
        #collision avec le haut de la fenêtre
        if self.rect.top < 0:
            self.vitesse_y *= -1
            
        # collision avec le bas de la fenêtre : si cela arrive, on a perdu
        if self.rect.bottom > haut_ecran:
            self.vie = -1
        
        # collision avec le palet 
        if abs(palet.rect.top - self.rect.bottom) <self.vitesse_y and self.vitesse_y >0 and  palet.rect.left - self.rect.right < 0 and palet.rect.right - self.rect.left > 0 :
            self.vitesse_y *= -1
            
        # la balle avance 
        self.rect.x += self.vitesse_x
        self.rect.y += self.vitesse_y
        
        return self.vie
    
    # affichage de la balle
    def proj(self):
        pygame.draw.circle(ecran, (145, 20, 201), (self.rect.x + self.ray, self.rect.y + self.ray), self.ray)
        
    # définition des paramètres de la balle
    def zero(self, x, y):
        self.ray = 10
        self.x = x - self.ray
        self.y = y
        self.rect = Rect(self.x, self.y, self.ray * 2, self.ray * 2)
        self.vitesse_x = 5
        self.vitesse_y = -5
        self.vie = 0

# affichage du texte
def proj_texte(texte, x, y):
    textesurface = police.render(texte, False, (61,61,108))
    ecran.blit(textesurface,(x,y))

# on définit les variables liées aux classes
briques = briques()
briques.cree_briques()
palet = palet()
balle = balle(palet.x + (palet.larg // 2), palet.y - palet.haut)

#boucle du jeu 
jeu = True

while jeu:
    
    #affichage du fond d'écran
    ecran.fill((219, 213, 217))
    
    # affichage à chaque fois des briques, du palet et de la balle
    temps.tick(difficulte)
    briques.proj_briques()
    palet.proj()
    balle.proj()
    
    # début du jeu (après avoir appuyé sur 'espace')
    if etat:
        palet.mvt() # déplacement du palet
        vie = balle.mvt() # déplacement de la balle
        if vie != 0: # le jeu s'arrête si on a perdu ou gagné
            etat = False
    
    # affichage des commandes si le jeu est à l'arrêt
    if not etat:
        if vie == 0: # si le jeu n'a pas encore commencé
            proj_texte('APPUYEZ SUR LA BARRE ESPACE POUR COMMENCER', haut_ecran//4, haut_ecran // 2 + 100)
        elif vie == 1: # si on vient de gagner
            proj_texte('VOUS AVEZ GAGNÉ !', haut_ecran//2 +30, haut_ecran // 2 + 50)
            proj_texte('APPUYEZ SUR LA BARRE ESPACE POUR RECOMMENCER', haut_ecran//4, haut_ecran // 2 + 100)
        elif vie == -1: # si on vient de perdre
            proj_texte('VOUS AVEZ PERDU !',haut_ecran//2 +30, haut_ecran // 2 + 50)
            proj_texte('APPUYEZ SUR LA BARRE ESPACE POUR RECOMMENCER', haut_ecran//4, haut_ecran // 2 + 100)
            
    # si on ferme la fenêtre, le jeu s'arrête
    for evenement in pygame.event.get():
        if evenement.type == pygame.QUIT:
            jeu = False
            
    # si on appuie sur 'espace' et que le jeu est à l'arrêt (trois cas de figure, cf ci-dessus), alors le jeu (re)démarre
    touche = pygame.key.get_pressed()
    if touche[pygame.K_SPACE] and  etat == False:
        etat = True
        balle.zero(palet.x + (palet.larg // 2), palet.y - palet.haut)
        palet.zero()
        briques.cree_briques()
    
    # on affiche la fenêtre avec les nouvelles modifications 
    pygame.display.update() 
    
    # on quitte pygame
pygame.quit()
